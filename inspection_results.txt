{
  "system_info": {
    "platform": "Windows",
    "platform_version": "10.0.26100",
    "python_version": "3.12.5 (tags/v3.12.5:ff3bc82, Aug  6 2024, 20:45:27) [MSC v.1940 64 bit (AMD64)]",
    "cwd": "C:\\Users\\ColsonR\\OneDrive - Lynn Public Schools\\Desktop\\2018APExamFRQ6"
  },
  "file_info": {
    "path": "C:\\Users\\ColsonR\\OneDrive - Lynn Public Schools\\Desktop\\2018APExamFRQ6\\index.html",
    "exists": true,
    "size": 37103,
    "last_modified": 1742757543.6675355,
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AP Statistics Learning Resources</title>\n    \n    <!-- Tailwind CSS -->\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    \n    <!-- React and ReactDOM -->\n    <script crossorigin src=\"https://unpkg.com/react@18/umd/react.production.min.js\"></script>\n    <script crossorigin src=\"https://unpkg.com/react-dom@18/umd/react-dom.production.min.js\"></script>\n    \n    <!-- Babel for JSX -->\n    <script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"></script>\n    \n    <!-- Mermaid JS -->\n    <script src=\"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\"></script>\n    \n    <style>\n        .tab-content {\n            display: none;\n        }\n        .tab-content.active {\n            display: block;\n        }\n        .tab-button {\n            padding: 0.75rem 1.5rem;\n            border-radius: 0.5rem 0.5rem 0 0;\n            cursor: pointer;\n        }\n        .tab-button.active {\n            background-color: #f0f9ff;\n            border-bottom: 2px solid #3b82f6;\n            font-weight: bold;\n        }\n    </style>\n</head>\n<body class=\"bg-gray-100 min-h-screen\">\n    <div class=\"container mx-auto px-4 py-8\">\n        <header class=\"text-center mb-8\">\n            <h1 class=\"text-3xl font-bold text-blue-600\">AP Statistics Learning Resources</h1>\n            <p class=\"text-gray-600 mt-2\">Tools and guides to help you succeed in AP Statistics</p>\n        </header>\n        \n        <!-- Tab Navigation -->\n        <div class=\"flex mb-0 border-b border-gray-200\">\n            <div id=\"tab-learning-flow\" class=\"tab-button active\">Learning Flow</div>\n            <div id=\"tab-flowchart\" class=\"tab-button\">Flowchart</div>\n            <div id=\"tab-grok-prompt\" class=\"tab-button\">Grok Prompt</div>\n            <div id=\"tab-study-materials\" class=\"tab-button\">Study Materials</div>\n        </div>\n        \n        <!-- Tab Content -->\n        <div class=\"bg-white rounded-b-lg shadow-md p-6\">\n            <!-- Learning Flow Tab -->\n            <div id=\"content-learning-flow\" class=\"tab-content active\">\n                <div id=\"learning-flow-app\"></div>\n            </div>\n            \n            <!-- Flowchart Tab -->\n            <div id=\"content-flowchart\" class=\"tab-content\">\n                <h2 class=\"text-xl font-bold mb-4\">AP Statistics Learning Session Flowchart</h2>\n                <div class=\"bg-gray-50 p-4 rounded-lg\">\n                    <div class=\"mermaid\" id=\"flowchart\"></div>\n                </div>\n            </div>\n            \n            <!-- Grok Prompt Tab -->\n            <div id=\"content-grok-prompt\" class=\"tab-content\">\n                <h2 class=\"text-xl font-bold mb-4\">Grok AI Tutor Prompt</h2>\n                <p class=\"mb-4\">Copy and paste this prompt into Grok to set up your AI tutor:</p>\n                <div class=\"bg-gray-50 p-4 rounded-lg\">\n                    <pre id=\"grok-prompt\" class=\"whitespace-pre-wrap text-sm\"></pre>\n                </div>\n                <button id=\"copy-button\" class=\"mt-4 bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600\">Copy to Clipboard</button>\n            </div>\n            \n            <!-- Study Materials Tab -->\n            <div id=\"content-study-materials\" class=\"tab-content\">\n                <h2 class=\"text-xl font-bold mb-4\">AP Statistics Study Materials</h2>\n                <p class=\"mb-4\">Select a topic to study. Download both PDFs and attach them to your Grok conversation.</p>\n                \n                <div class=\"mb-4\">\n                    <div class=\"flex items-center mb-2\">\n                        <label for=\"topic-select\" class=\"mr-2 font-medium\">Track your progress:</label>\n                        <select id=\"topic-select\" class=\"p-2 border rounded-md\">\n                            <option value=\"\">Select a topic...</option>\n                        </select>\n                    </div>\n                    <div id=\"progress-container\" class=\"w-full bg-gray-200 rounded-full h-2.5 mb-4\">\n                        <div id=\"progress-bar\" class=\"bg-blue-600 h-2.5 rounded-full\" style=\"width: 0%\"></div>\n                    </div>\n                </div>\n                \n                <!-- All Topics Completed Message -->\n                <div id=\"all-completed-container\" class=\"hidden mb-6 p-6 bg-green-50 border border-green-200 rounded-lg text-center\">\n                    <h3 class=\"text-xl font-bold text-green-700 mb-2\">\ud83c\udf89 Congratulations! \ud83c\udf89</h3>\n                    <p class=\"text-green-700 mb-4\">You've completed all AP Statistics topics including the capstone AP Exam FRQ 6!</p>\n                    <button id=\"reset-progress-btn\" class=\"px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600\">\n                        Reset Progress\n                    </button>\n                </div>\n                \n                <div id=\"topic-cards-container\" class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <!-- Topic cards will be dynamically inserted here -->\n                </div>\n                \n                <div id=\"next-topic-container\" class=\"mt-6 p-4 bg-blue-50 rounded-lg hidden\">\n                    <h3 class=\"font-bold text-lg mb-2\">Ready for the next topic?</h3>\n                    <p class=\"mb-2\">Great job completing the current topic! Here's what to study next:</p>\n                    <div id=\"next-topic-card\" class=\"p-4 bg-white rounded-lg shadow-md\"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <!-- Scripts -->\n    <script>\n        // Flowchart Mermaid Definition\n        const flowchartDefinition = `flowchart TD\n    A[Start Learning Session] --> B[Gather All Materials]\n    B --> C[Open Grok AI Assistant]\n    C --> D[Copy & Paste Tutor Prompt]\n    D --> E[Watch Video Topic]\n    \n    E --> F{Confused about\\\\nsomething?}\n    F -->|Yes| G[Pause Video]\n    G --> H[Ask Grok for Help]\n    H --> I[Return to Video]\n    I --> E\n    \n    F -->|No| J[Finish Video]\n    J --> K[Work Through Practice MCQs with Grok]\n    K --> L[Work Through FRQs with Grok]\n    L --> M[Review Session Summary from Grok]\n    M --> N[Move to Next Video Topic]\n    N --> E\n    \n    classDef blueBox fill:#d4f1f9,stroke:#05b2dc,stroke-width:2px;\n    classDef greenBox fill:#d8f3dc,stroke:#2d6a4f,stroke-width:2px;\n    classDef yellowBox fill:#fefae0,stroke:#bc6c25,stroke-width:2px;\n    classDef purpleBox fill:#e0c3fc,stroke:#7b2cbf,stroke-width:2px;\n    \n    class A,B,C,D blueBox;\n    class E,F,G,H,I yellowBox;\n    class J,K,L greenBox;\n    class M,N purpleBox;`;\n        \n        // Grok Prompt\n        const grokPrompt = `You are an expert AP Statistics tutor. I will provide you with AP Statistics questions, which could be either multiple choice (MCQ) or free response (FRQ). For each question, I will indicate the type (MCQ or FRQ). Your task is to guide me through the questions as follows:\n\nFor MCQs:\n- Present the Question: Display the multiple choice question with all answer options (A, B, C, D, E).\n- Analyze My Answer: After I submit my answer:\n  - If Correct: Confirm that my answer is correct and proceed to the next question.\n  - If Incorrect: Identify my misconception and provide scaffolded guidance without revealing the answer.\n- Provide Context (If Needed): For incorrect answers, once I arrive at the correct answer, provide relevant context.\n- Summarize the Concept: Summarize the key concept being tested (only if I answered incorrectly).\n- Check for Questions: Ask if I have additional questions before moving on (only if I needed guidance).\n\nFor FRQs:\n- Present the Question: Display the free response question.\n- Break It Down: Break down the question into smaller, scaffolded steps.\n- Request Responses: For each scaffolded question, ask me to provide a response.\n- Grade My Response: Evaluate my response based on the AP grading rubric.\n- Guide Me: If my response is lacking, offer hints to help me improve.\n- Ensure Perfection: Continue until I can provide a response that meets the rubric's requirements.\n- Summarize the Concepts: Once completed correctly, summarize the key concepts.\n- Check for Questions: Ask if I have additional questions before moving on.\n\nThroughout the Session:\n- Track Performance: Monitor my performance to provide personalized guidance.\n- Session Summary: At the end, summarize key concepts and suggest areas for additional practice.\n\nThank you for helping me prepare for my AP Statistics exam!`;\n        \n        // Initialize Mermaid\n        mermaid.initialize({ \n            startOnLoad: true, \n            theme: 'default',\n            securityLevel: 'loose',\n            logLevel: 5,\n            flowchart: { \n                useMaxWidth: true, \n                htmlLabels: true,\n                curve: 'basis'\n            }\n        });\n        \n        // Function to render the flowchart\n        function renderFlowchart() {\n            const container = document.getElementById('flowchart');\n            \n            // Remove all children and recreate the element\n            while (container.firstChild) {\n                container.removeChild(container.firstChild);\n            }\n            \n            // Force re-parsing by creating and appending a new pre element\n            const pre = document.createElement('pre');\n            pre.className = 'mermaid';\n            pre.textContent = flowchartDefinition;\n            container.appendChild(pre);\n            \n            // Completely reinitialize mermaid for proper rendering\n            try {\n                mermaid.contentLoaded();\n            } catch (e) {\n                console.error('Mermaid parsing error:', e);\n            }\n        }\n        \n        // Study Materials and PDF Organization\n        \n        // Define the PDF files and organize them by topic\n        const pdfFiles = [\n            { \n                id: \"4-8\", \n                name: \"Topic 4-8\", \n                description: \"Binomial and Geometric Random Variables\",\n                questionPdf: \"4-8mcq.pdf\",\n                answersPdf: \"4-8mcqAnswers.pdf\",\n                completed: false\n            },\n            { \n                id: \"4-9\", \n                name: \"Topic 4-9\", \n                description: \"Transforming and Combining Random Variables\",\n                questionPdf: \"4-9mcqfrq.pdf\",\n                answersPdf: \"4-9mcqfrqAnswers.pdf\",\n                completed: false\n            },\n            { \n                id: \"5-5\", \n                name: \"Topic 5-5\", \n                description: \"Sampling Distributions for Means\",\n                questionPdf: \"5-5mcq.pdf\",\n                answersPdf: \"5-5mcqAnswers.pdf\",\n                completed: false\n            },\n            { \n                id: \"5-6\", \n                name: \"Topic 5-6\", \n                description: \"Central Limit Theorem\",\n                questionPdf: \"5-6mcqfrq.pdf\",\n                answersPdf: \"5-6mcqfrqAnswers.pdf\",\n                completed: false\n            },\n            { \n                id: \"6-4\", \n                name: \"Topic 6-4\", \n                description: \"Confidence Intervals for Proportions\",\n                questionPdf: \"6-4mcq.pdf\",\n                answersPdf: \"6-4mcqAnswers.pdf\",\n                completed: false\n            },\n            { \n                id: \"6-5\", \n                name: \"Topic 6-5\", \n                description: \"Confidence Intervals for Means\",\n                questionPdf: \"6-5mcq.pdf\",\n                answersPdf: \"6-5mcqAnswers.pdf\",\n                completed: false\n            },\n            { \n                id: \"6-10\", \n                name: \"Topic 6-10\", \n                description: \"Selecting an Appropriate Inference Procedure\",\n                questionPdf: \"6-10mcq.pdf\",\n                answersPdf: \"6-10mcqAnswers.pdf\",\n                completed: false\n            },\n            {\n                id: \"exam-frq6\",\n                name: \"AP Exam FRQ 6\",\n                description: \"CAPSTONE: 2018 AP Exam Free Response Question 6\",\n                questionPdf: \"2018APExamFRQ6-Question.pdf\",\n                answersPdf: \"2018APExamFRQ6-Answer.pdf\",\n                isCapstone: true,\n                completed: false\n            }\n        ];\n        \n        // Function to create a topic card\n        function createTopicCard(topic, isNextTopic = false) {\n            const card = document.createElement('div');\n            \n            // Special styling for capstone topic\n            const isCapstone = topic.isCapstone === true;\n            \n            // Different styling based on topic type and completion status\n            let cardClasses = 'p-4 rounded-lg shadow-md topic-card ';\n            if (topic.completed) {\n                cardClasses += 'bg-green-50 border border-green-200';\n            } else if (isCapstone) {\n                cardClasses += 'bg-yellow-50 border border-yellow-200';\n            } else {\n                cardClasses += 'bg-white';\n            }\n            \n            card.className = cardClasses;\n            card.id = `topic-card-${topic.id}`;\n            \n            // Status icon varies by completion and type\n            let statusIcon = '';\n            if (topic.completed) {\n                statusIcon = '<span class=\"text-green-500 mr-2\">\u2713</span>';\n            } else if (isNextTopic) {\n                statusIcon = '<span class=\"text-blue-500 mr-2\">\u2192</span>';\n            } else if (isCapstone) {\n                statusIcon = '<span class=\"text-yellow-500 mr-2\">\ud83c\udfc6</span>';\n            }\n            \n            // Status badge text and style\n            let badgeClass = topic.completed \n                ? 'bg-green-100 text-green-800' \n                : isCapstone \n                  ? 'bg-yellow-100 text-yellow-800' \n                  : 'bg-blue-100 text-blue-800';\n            \n            let badgeText = topic.completed \n                ? 'Completed' \n                : isCapstone \n                  ? 'Capstone' \n                  : 'Not Started';\n            \n            card.innerHTML = `\n                <div class=\"flex justify-between items-start mb-3\">\n                    <h3 class=\"font-bold text-lg\">${statusIcon}${topic.name}</h3>\n                    <span class=\"px-2 py-1 text-xs rounded-full ${badgeClass}\">\n                        ${badgeText}\n                    </span>\n                </div>\n                <p class=\"text-gray-700 mb-3\">${topic.description}</p>\n                <div class=\"flex flex-col gap-2\">\n                    <a href=\"${topic.questionPdf}\" target=\"_blank\" class=\"flex items-center text-blue-600 hover:text-blue-800\">\n                        <svg class=\"w-4 h-4 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path d=\"M10 12a2 2 0 100-4 2 2 0 000 4z\"></path>\n                            <path fill-rule=\"evenodd\" d=\"M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z\" clip-rule=\"evenodd\"></path>\n                        </svg>\n                        View Questions\n                    </a>\n                    <a href=\"${topic.answersPdf}\" target=\"_blank\" class=\"flex items-center text-blue-600 hover:text-blue-800\">\n                        <svg class=\"w-4 h-4 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path fill-rule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clip-rule=\"evenodd\"></path>\n                        </svg>\n                        View Answers\n                    </a>\n                    ${isNextTopic ? `\n                    <button \n                        class=\"mt-2 px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600\"\n                        onclick=\"markTopicAsStarted('${topic.id}')\"\n                    >\n                        Start This Topic\n                    </button>\n                    ` : \n                    !topic.completed ? `\n                    <button \n                        class=\"mt-2 px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600\"\n                        onclick=\"markTopicAsCompleted('${topic.id}')\"\n                    >\n                        Mark as Completed\n                    </button>\n                    ` : ''}\n                    ${isCapstone && !topic.completed ? `\n                    <div class=\"mt-2 p-2 bg-yellow-100 text-yellow-800 text-xs rounded\">\n                        Complete all previous topics before attempting this capstone challenge!\n                    </div>\n                    ` : ''}\n                </div>\n            `;\n            \n            return card;\n        }\n        \n        // Add styling for the pulse animation and completed state\n        const style = document.createElement('style');\n        style.textContent = `\n            @keyframes pulse {\n                0% { box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.7); }\n                70% { box-shadow: 0 0 0 10px rgba(59, 130, 246, 0); }\n                100% { box-shadow: 0 0 0 0 rgba(59, 130, 246, 0); }\n            }\n            \n            .pulse-animation {\n                animation: pulse 1s ease-in-out 2;\n            }\n            \n            .completed-state {\n                opacity: 0.8;\n                position: relative;\n            }\n            \n            .completed-state::after {\n                content: \"\";\n                position: absolute;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background-color: rgba(0, 0, 0, 0.05);\n                pointer-events: none;\n                z-index: 1;\n            }\n            \n            .completed-state .topic-card:not(.capstone-completed) {\n                filter: grayscale(50%);\n            }\n            \n            .capstone-completed {\n                transform: scale(1.02);\n                box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n                z-index: 2;\n                position: relative;\n            }\n        `;\n        document.head.appendChild(style);\n        \n        // Function to check if all topics are completed\n        function checkAllTopicsCompleted() {\n            const allCompleted = pdfFiles.every(topic => topic.completed);\n            const completedContainer = document.getElementById('all-completed-container');\n            const topicCardsContainer = document.getElementById('topic-cards-container');\n            const studyMaterialsTab = document.getElementById('content-study-materials');\n            \n            if (allCompleted) {\n                // Show completion message\n                completedContainer.classList.remove('hidden');\n                \n                // Hide the next topic container\n                document.getElementById('next-topic-container').classList.add('hidden');\n                \n                // Add completed state styling to the cards container\n                topicCardsContainer.classList.add('completed-state');\n                \n                // Find the capstone topic card and highlight it\n                const capstoneCard = document.getElementById(`topic-card-exam-frq6`);\n                if (capstoneCard) {\n                    capstoneCard.classList.add('capstone-completed');\n                }\n                \n                // Add a subtle completion state to the entire tab\n                studyMaterialsTab.classList.add('bg-green-50');\n            } else {\n                // Hide completion message\n                completedContainer.classList.add('hidden');\n                \n                // Remove completed state styling\n                topicCardsContainer.classList.remove('completed-state');\n                studyMaterialsTab.classList.remove('bg-green-50');\n                \n                // Remove capstone highlight\n                const capstoneCard = document.getElementById(`topic-card-exam-frq6`);\n                if (capstoneCard) {\n                    capstoneCard.classList.remove('capstone-completed');\n                }\n            }\n            \n            return allCompleted;\n        }\n        \n        // Function to reset all progress\n        function resetProgress() {\n            // Confirm reset\n            if (confirm('Are you sure you want to reset all progress? This cannot be undone.')) {\n                // Reset all topics to not completed\n                pdfFiles.forEach(topic => {\n                    topic.completed = false;\n                    topic.current = false;\n                });\n                \n                // Save to local storage\n                saveTopicProgress();\n                \n                // Refresh the UI\n                populateTopicCards();\n                \n                // Hide completion message\n                document.getElementById('all-completed-container').classList.add('hidden');\n            }\n        }\n        \n        // Function to populate the topic cards\n        function populateTopicCards() {\n            const container = document.getElementById('topic-cards-container');\n            container.innerHTML = '';\n            \n            pdfFiles.forEach(topic => {\n                const card = createTopicCard(topic);\n                container.appendChild(card);\n            });\n            \n            updateNextTopic();\n            updateProgressBar();\n            populateTopicSelect();\n            checkAllTopicsCompleted();\n        }\n        \n        // Function to populate the topic select dropdown\n        function populateTopicSelect() {\n            const select = document.getElementById('topic-select');\n            select.innerHTML = '<option value=\"\">Select a topic...</option>';\n            \n            pdfFiles.forEach(topic => {\n                const option = document.createElement('option');\n                option.value = topic.id;\n                option.textContent = topic.name;\n                select.appendChild(option);\n            });\n            \n            // Add event listener to handle selection\n            select.addEventListener('change', function() {\n                const selectedTopicId = this.value;\n                if (!selectedTopicId) return;\n                \n                // Scroll to the selected topic card\n                const card = document.getElementById(`topic-card-${selectedTopicId}`);\n                if (card) {\n                    card.scrollIntoView({ behavior: 'smooth', block: 'center' });\n                    card.classList.add('pulse-animation');\n                    setTimeout(() => {\n                        card.classList.remove('pulse-animation');\n                    }, 2000);\n                }\n            });\n        }\n        \n        // Function to mark a topic as completed\n        function markTopicAsCompleted(topicId) {\n            const topic = pdfFiles.find(t => t.id === topicId);\n            if (topic) {\n                topic.completed = true;\n                \n                // Update local storage to persist completion status\n                saveTopicProgress();\n                \n                // Refresh the UI\n                populateTopicCards();\n            }\n        }\n        \n        // Function to mark a topic as started (for next topic suggestions)\n        function markTopicAsStarted(topicId) {\n            // Set all topics as not current\n            pdfFiles.forEach(t => {\n                if (t.id === topicId) {\n                    t.current = true;\n                } else {\n                    t.current = false;\n                }\n            });\n            \n            // Save and refresh UI\n            saveTopicProgress();\n            populateTopicCards();\n            \n            // Scroll to the topic card\n            const card = document.getElementById(`topic-card-${topicId}`);\n            if (card) {\n                card.scrollIntoView({ behavior: 'smooth', block: 'center' });\n            }\n        }\n        \n        // Function to update the next topic section\n        function updateNextTopic() {\n            const nextTopicContainer = document.getElementById('next-topic-container');\n            const nextTopicCard = document.getElementById('next-topic-card');\n            \n            // Check if all topics are completed\n            if (checkAllTopicsCompleted()) {\n                nextTopicContainer.classList.add('hidden');\n                return;\n            }\n            \n            // Get all non-capstone topics first\n            const regularTopics = pdfFiles.filter(topic => !topic.isCapstone);\n            \n            // Find the first incomplete regular topic\n            let nextTopic = regularTopics.find(topic => !topic.completed);\n            \n            // If all regular topics are completed, suggest the capstone\n            if (!nextTopic) {\n                nextTopic = pdfFiles.find(topic => topic.isCapstone && !topic.completed);\n            }\n            \n            if (nextTopic) {\n                nextTopicContainer.classList.remove('hidden');\n                nextTopicCard.innerHTML = '';\n                nextTopicCard.appendChild(createTopicCard(nextTopic, true));\n            } else {\n                nextTopicContainer.classList.add('hidden');\n            }\n        }\n        \n        // Function to update the progress bar\n        function updateProgressBar() {\n            const completedCount = pdfFiles.filter(topic => topic.completed).length;\n            const totalCount = pdfFiles.length;\n            const progressPercentage = totalCount > 0 ? (completedCount / totalCount) * 100 : 0;\n            \n            const progressBar = document.getElementById('progress-bar');\n            progressBar.style.width = `${progressPercentage}%`;\n            \n            // Add text to the progress bar if it's big enough\n            if (progressPercentage > 10) {\n                progressBar.textContent = `${Math.round(progressPercentage)}% Complete`;\n            } else {\n                progressBar.textContent = '';\n            }\n        }\n        \n        // Function to save topic progress to local storage\n        function saveTopicProgress() {\n            const progress = pdfFiles.map(topic => ({\n                id: topic.id,\n                completed: topic.completed,\n                current: topic.current\n            }));\n            \n            localStorage.setItem('apStatsTopicProgress', JSON.stringify(progress));\n        }\n        \n        // Function to load topic progress from local storage\n        function loadTopicProgress() {\n            const savedProgress = localStorage.getItem('apStatsTopicProgress');\n            \n            if (savedProgress) {\n                const progress = JSON.parse(savedProgress);\n                \n                // Update the pdfFiles array with saved progress\n                progress.forEach(savedTopic => {\n                    const topic = pdfFiles.find(t => t.id === savedTopic.id);\n                    if (topic) {\n                        topic.completed = savedTopic.completed;\n                        topic.current = savedTopic.current;\n                    }\n                });\n            }\n        }\n        \n        // Document ready function\n        document.addEventListener('DOMContentLoaded', function() {\n            // Set Grok prompt content\n            document.getElementById('grok-prompt').textContent = grokPrompt;\n            \n            // Tab Switching Logic\n            document.querySelectorAll('.tab-button').forEach(button => {\n                button.addEventListener('click', () => {\n                    // Update active tab button\n                    document.querySelectorAll('.tab-button').forEach(btn => {\n                        btn.classList.remove('active');\n                    });\n                    button.classList.add('active');\n                    \n                    // Update active content\n                    const contentId = button.id.replace('tab-', 'content-');\n                    document.querySelectorAll('.tab-content').forEach(content => {\n                        content.classList.remove('active');\n                    });\n                    document.getElementById(contentId).classList.add('active');\n                    \n                    // Always render mermaid chart if flowchart tab, whether it was previously active or not\n                    if (button.id === 'tab-flowchart') {\n                        // Small delay to ensure the tab content is visible before rendering\n                        setTimeout(renderFlowchart, 50);\n                    }\n                    \n                    // Initialize topic cards if study materials tab\n                    if (button.id === 'tab-study-materials') {\n                        loadTopicProgress();\n                        populateTopicCards();\n                    }\n                });\n            });\n            \n            // Copy to clipboard functionality\n            document.getElementById('copy-button').addEventListener('click', () => {\n                navigator.clipboard.writeText(grokPrompt).then(() => {\n                    const button = document.getElementById('copy-button');\n                    button.textContent = 'Copied!';\n                    button.classList.add('bg-green-500');\n                    \n                    setTimeout(() => {\n                        button.textContent = 'Copy to Clipboard';\n                        button.classList.remove('bg-green-500');\n                    }, 2000);\n                });\n            });\n            \n            // Reset progress button functionality\n            document.getElementById('reset-progress-btn').addEventListener('click', resetProgress);\n            \n            // Auto-render flowchart if that tab is initially selected\n            if (document.getElementById('tab-flowchart').classList.contains('active')) {\n                renderFlowchart();\n            }\n            \n            // Initialize study materials if that tab is initially selected\n            if (document.getElementById('tab-study-materials').classList.contains('active')) {\n                loadTopicProgress();\n                populateTopicCards();\n            }\n        });\n        \n        // Make the topic functions available globally\n        window.markTopicAsCompleted = markTopicAsCompleted;\n        window.markTopicAsStarted = markTopicAsStarted;\n    </script>\n    \n    <!-- React Component -->\n    <script type=\"text/babel\">\n        const APStatLearningFlow = () => {\n          const [currentStep, setCurrentStep] = React.useState(0);\n          \n          const steps = [\n            {\n              title: \"1. Set Up\",\n              icon: \"\ud83d\udcdd\",\n              content: \"Grab your materials: pencil, paper, calculator, formula sheet, laptop, and headphones (optional)\",\n              tips: [\"Find a quiet place to focus\", \"Make sure your laptop is charged\"]\n            },\n            {\n              title: \"2. Prepare Grok\",\n              icon: \"\ud83e\udd16\",\n              content: \"Open Grok and set up the AI tutor for your specific video\",\n              tips: [\"Copy the provided AP Statistics tutor prompt\", \"Start a new conversation in Grok\"]\n            },\n            {\n              title: \"3. Watch Video\",\n              icon: \"\ud83d\udcfa\",\n              content: \"Actively watch the video (starting with the lowest topic number)\",\n              tips: [\"Take notes on paper\", \"Work through every example shown\"]\n            },\n            {\n              title: \"4. Ask Questions\",\n              icon: \"\u2753\",\n              content: \"If you get confused during the video, pause and ask Grok for help\",\n              tips: [\"Be specific about what confused you\", \"Return to the video once you understand\"]\n            },\n            {\n              title: \"5. Practice Problems\",\n              icon: \"\ud83e\udde9\",\n              content: \"After the video, use Grok to work through the practice problems\",\n              tips: [\"Start with multiple choice\", \"Let Grok guide you through free response questions\"]\n            }\n          ];\n          \n          const handlePrev = () => {\n            setCurrentStep(prev => Math.max(0, prev - 1));\n          };\n          \n          const handleNext = () => {\n            setCurrentStep(prev => Math.min(steps.length - 1, prev + 1));\n          };\n\n          return (\n            <div className=\"flex flex-col bg-gray-50 p-4 rounded-lg max-w-4xl mx-auto\">\n              <h1 className=\"text-2xl font-bold text-center mb-6\">AP Statistics: Using Grok to Help You Learn</h1>\n              \n              {/* Progress Tracker */}\n              <div className=\"flex justify-between mb-8\">\n                {steps.map((step, idx) => (\n                  <div \n                    key={idx} \n                    className={`flex flex-col items-center cursor-pointer ${idx <= currentStep ? 'text-blue-600' : 'text-gray-400'}`}\n                    onClick={() => setCurrentStep(idx)}\n                  >\n                    <div className={`w-12 h-12 rounded-full flex items-center justify-center text-xl mb-2 ${idx <= currentStep ? 'bg-blue-100' : 'bg-gray-200'}`}>\n                      {step.icon}\n                    </div>\n                    <div className=\"text-xs font-medium text-center w-20\">{step.title}</div>\n                  </div>\n                ))}\n              </div>\n              \n              {/* Step Content */}\n              <div className=\"bg-white p-6 rounded-lg shadow-md mb-6\">\n                <h2 className=\"text-xl font-bold mb-4\">{steps[currentStep].title}</h2>\n                <p className=\"mb-4\">{steps[currentStep].content}</p>\n                \n                <div className=\"bg-blue-50 p-4 rounded-lg\">\n                  <h3 className=\"font-bold text-blue-800 mb-2\">Pro Tips:</h3>\n                  <ul className=\"list-disc pl-5\">\n                    {steps[currentStep].tips.map((tip, idx) => (\n                      <li key={idx} className=\"mb-1\">{tip}</li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n              \n              {/* Materials List (visible on all screens) */}\n              <div className=\"bg-white p-4 rounded-lg shadow-md mb-6\">\n                <h3 className=\"font-bold mb-2\">Materials Needed:</h3>\n                <div className=\"grid grid-cols-3 gap-2\">\n                  <div className=\"flex items-center\"><span className=\"mr-2\">\ud83d\udcc4</span> Paper</div>\n                  <div className=\"flex items-center\"><span className=\"mr-2\">\u270f\ufe0f</span> Pencil</div>\n                  <div className=\"flex items-center\"><span className=\"mr-2\">\ud83e\uddee</span> Calculator</div>\n                  <div className=\"flex items-center\"><span className=\"mr-2\">\ud83d\udcbb</span> Laptop</div>\n                  <div className=\"flex items-center\"><span className=\"mr-2\">\ud83c\udfa7</span> Headphones (optional)</div>\n                  <div className=\"flex items-center\"><span className=\"mr-2\">\ud83d\udccb</span> Clipboard</div>\n                  <div className=\"flex items-center\"><span className=\"mr-2\">\ud83d\udcd1</span> AP Exam Formula Sheet</div>\n                </div>\n              </div>\n              \n              {/* Navigation Buttons */}\n              <div className=\"flex justify-between\">\n                <button \n                  onClick={handlePrev} \n                  className={`px-4 py-2 rounded-lg ${currentStep === 0 ? 'bg-gray-200 text-gray-500' : 'bg-blue-500 text-white'}`}\n                  disabled={currentStep === 0}\n                >\n                  Previous Step\n                </button>\n                <button \n                  onClick={handleNext} \n                  className={`px-4 py-2 rounded-lg ${currentStep === steps.length - 1 ? 'bg-gray-200 text-gray-500' : 'bg-blue-500 text-white'}`}\n                  disabled={currentStep === steps.length - 1}\n                >\n                  Next Step\n                </button>\n              </div>\n            </div>\n          );\n        };\n\n        // Render React component\n        ReactDOM.render(<APStatLearningFlow />, document.getElementById('learning-flow-app'));\n    </script>\n</body>\n</html> ",
    "line_count": 832
  },
  "list_directory": {
    "path": "C:\\Users\\ColsonR\\OneDrive - Lynn Public Schools\\Desktop\\2018APExamFRQ6",
    "files": [
      {
        "name": "4-8mcq.pdf",
        "size": 112433
      },
      {
        "name": "4-8mcqAnswers.pdf",
        "size": 179711
      },
      {
        "name": "4-9mcqfrq.pdf",
        "size": 139161
      },
      {
        "name": "4-9mcqfrqAnswers.pdf",
        "size": 510926
      },
      {
        "name": "5-5mcq.pdf",
        "size": 199870
      },
      {
        "name": "5-5mcqAnswers.pdf",
        "size": 289147
      },
      {
        "name": "5-6mcqfrq.pdf",
        "size": 254043
      },
      {
        "name": "5-6mcqfrqAnswers.pdf",
        "size": 560487
      },
      {
        "name": "6-10mcq.pdf",
        "size": 269443
      },
      {
        "name": "6-10mcqAnswers.pdf",
        "size": 373208
      },
      {
        "name": "6-4mcq.pdf",
        "size": 274050
      },
      {
        "name": "6-4mcqAnswers.pdf",
        "size": 236876
      },
      {
        "name": "6-5mcq.pdf",
        "size": 181080
      },
      {
        "name": "6-5mcqAnswers.pdf",
        "size": 251820
      },
      {
        "name": "alternative-solution.html",
        "size": 15372
      },
      {
        "name": "file_inspector.py",
        "size": 7795
      },
      {
        "name": "flow-chart.mermaid",
        "size": 938
      },
      {
        "name": "flowchart-only.html",
        "size": 2661
      },
      {
        "name": "FormulasAPExam.pdf",
        "size": 1913549
      },
      {
        "name": "grok-prompt.md",
        "size": 1875
      },
      {
        "name": "grokMCQFRQprompt.txt",
        "size": 2769
      },
      {
        "name": "index.html",
        "size": 37103
      },
      {
        "name": "learning-flow.tsx",
        "size": 4665
      },
      {
        "name": "README.md",
        "size": 4161
      },
      {
        "name": "unit6Apexam2018frq6.pdf",
        "size": 93375
      },
      {
        "name": "unit6Apexam2018frq6scoresheet.pdf",
        "size": 96430
      }
    ],
    "directories": [
      ".git"
    ]
  },
  "header_tags": [
    {
      "line": 42,
      "content": "<header class=\"text-center mb-8\">",
      "type": "open"
    },
    {
      "line": 45,
      "content": "</header>",
      "type": "close"
    }
  ],
  "html_structure": {
    "doctype": {
      "line": 1,
      "content": "<!DOCTYPE html>"
    },
    "head_elements": [
      {
        "line": 4,
        "content": "<meta charset=\"UTF-8\">"
      },
      {
        "line": 5,
        "content": "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">"
      },
      {
        "line": 6,
        "content": "<title>AP Statistics Learning Resources</title>"
      },
      {
        "line": 9,
        "content": "<script src=\"https://cdn.tailwindcss.com\"></script>"
      },
      {
        "line": 12,
        "content": "<script crossorigin src=\"https://unpkg.com/react@18/umd/react.production.min.js\"></script>"
      },
      {
        "line": 13,
        "content": "<script crossorigin src=\"https://unpkg.com/react-dom@18/umd/react-dom.production.min.js\"></script>"
      },
      {
        "line": 16,
        "content": "<script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"></script>"
      },
      {
        "line": 19,
        "content": "<script src=\"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\"></script>"
      }
    ],
    "body_elements": [
      {
        "line": 41,
        "content": "<div class=\"container mx-auto px-4 py-8\">"
      },
      {
        "line": 42,
        "content": "<header class=\"text-center mb-8\">"
      },
      {
        "line": 48,
        "content": "<div class=\"flex mb-0 border-b border-gray-200\">"
      },
      {
        "line": 49,
        "content": "<div id=\"tab-learning-flow\" class=\"tab-button active\">Learning Flow</div>"
      },
      {
        "line": 50,
        "content": "<div id=\"tab-flowchart\" class=\"tab-button\">Flowchart</div>"
      },
      {
        "line": 51,
        "content": "<div id=\"tab-grok-prompt\" class=\"tab-button\">Grok Prompt</div>"
      },
      {
        "line": 52,
        "content": "<div id=\"tab-study-materials\" class=\"tab-button\">Study Materials</div>"
      },
      {
        "line": 56,
        "content": "<div class=\"bg-white rounded-b-lg shadow-md p-6\">"
      },
      {
        "line": 58,
        "content": "<div id=\"content-learning-flow\" class=\"tab-content active\">"
      },
      {
        "line": 59,
        "content": "<div id=\"learning-flow-app\"></div>"
      },
      {
        "line": 63,
        "content": "<div id=\"content-flowchart\" class=\"tab-content\">"
      },
      {
        "line": 65,
        "content": "<div class=\"bg-gray-50 p-4 rounded-lg\">"
      },
      {
        "line": 66,
        "content": "<div class=\"mermaid\" id=\"flowchart\"></div>"
      },
      {
        "line": 71,
        "content": "<div id=\"content-grok-prompt\" class=\"tab-content\">"
      },
      {
        "line": 74,
        "content": "<div class=\"bg-gray-50 p-4 rounded-lg\">"
      },
      {
        "line": 81,
        "content": "<div id=\"content-study-materials\" class=\"tab-content\">"
      },
      {
        "line": 85,
        "content": "<div class=\"mb-4\">"
      },
      {
        "line": 86,
        "content": "<div class=\"flex items-center mb-2\">"
      },
      {
        "line": 92,
        "content": "<div id=\"progress-container\" class=\"w-full bg-gray-200 rounded-full h-2.5 mb-4\">"
      },
      {
        "line": 93,
        "content": "<div id=\"progress-bar\" class=\"bg-blue-600 h-2.5 rounded-full\" style=\"width: 0%\"></div>"
      },
      {
        "line": 98,
        "content": "<div id=\"all-completed-container\" class=\"hidden mb-6 p-6 bg-green-50 border border-green-200 rounded-lg text-center\">"
      },
      {
        "line": 106,
        "content": "<div id=\"topic-cards-container\" class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">"
      },
      {
        "line": 110,
        "content": "<div id=\"next-topic-container\" class=\"mt-6 p-4 bg-blue-50 rounded-lg hidden\">"
      },
      {
        "line": 113,
        "content": "<div id=\"next-topic-card\" class=\"p-4 bg-white rounded-lg shadow-md\"></div>"
      },
      {
        "line": 330,
        "content": "<div class=\"flex justify-between items-start mb-3\">"
      },
      {
        "line": 337,
        "content": "<div class=\"flex flex-col gap-2\">"
      },
      {
        "line": 368,
        "content": "<div class=\"mt-2 p-2 bg-yellow-100 text-yellow-800 text-xs rounded\">"
      },
      {
        "line": 759,
        "content": "<div className=\"flex flex-col bg-gray-50 p-4 rounded-lg max-w-4xl mx-auto\">"
      },
      {
        "line": 763,
        "content": "<div className=\"flex justify-between mb-8\">"
      },
      {
        "line": 770,
        "content": "<div className={`w-12 h-12 rounded-full flex items-center justify-center text-xl mb-2 ${idx <= currentStep ? 'bg-blue-100' : 'bg-gray-200'}`}>"
      },
      {
        "line": 773,
        "content": "<div className=\"text-xs font-medium text-center w-20\">{step.title}</div>"
      },
      {
        "line": 779,
        "content": "<div className=\"bg-white p-6 rounded-lg shadow-md mb-6\">"
      },
      {
        "line": 783,
        "content": "<div className=\"bg-blue-50 p-4 rounded-lg\">"
      },
      {
        "line": 794,
        "content": "<div className=\"bg-white p-4 rounded-lg shadow-md mb-6\">"
      },
      {
        "line": 796,
        "content": "<div className=\"grid grid-cols-3 gap-2\">"
      },
      {
        "line": 797,
        "content": "<div className=\"flex items-center\"><span className=\"mr-2\">\ud83d\udcc4</span> Paper</div>"
      },
      {
        "line": 798,
        "content": "<div className=\"flex items-center\"><span className=\"mr-2\">\u270f\ufe0f</span> Pencil</div>"
      },
      {
        "line": 799,
        "content": "<div className=\"flex items-center\"><span className=\"mr-2\">\ud83e\uddee</span> Calculator</div>"
      },
      {
        "line": 800,
        "content": "<div className=\"flex items-center\"><span className=\"mr-2\">\ud83d\udcbb</span> Laptop</div>"
      },
      {
        "line": 801,
        "content": "<div className=\"flex items-center\"><span className=\"mr-2\">\ud83c\udfa7</span> Headphones (optional)</div>"
      },
      {
        "line": 802,
        "content": "<div className=\"flex items-center\"><span className=\"mr-2\">\ud83d\udccb</span> Clipboard</div>"
      },
      {
        "line": 803,
        "content": "<div className=\"flex items-center\"><span className=\"mr-2\">\ud83d\udcd1</span> AP Exam Formula Sheet</div>"
      },
      {
        "line": 808,
        "content": "<div className=\"flex justify-between\">"
      }
    ],
    "script_blocks": [
      {
        "start_line": 9,
        "content": "<script src=\"https://cdn.tailwindcss.com\"></script>"
      },
      {
        "start_line": 12,
        "content": "<script crossorigin src=\"https://unpkg.com/react@18/umd/react.production.min.js\"></script>"
      },
      {
        "start_line": 13,
        "content": "<script crossorigin src=\"https://unpkg.com/react-dom@18/umd/react-dom.production.min.js\"></script>"
      },
      {
        "start_line": 16,
        "content": "<script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"></script>"
      },
      {
        "start_line": 19,
        "content": "<script src=\"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\"></script>"
      },
      {
        "start_line": 120,
        "content": "<script>"
      },
      {
        "start_line": 713,
        "content": "<script type=\"text/babel\">"
      }
    ],
    "body_start_line": 40,
    "body_end_line": 831
  }
}